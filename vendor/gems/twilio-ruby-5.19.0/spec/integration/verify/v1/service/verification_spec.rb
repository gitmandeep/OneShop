##
# This code was generated by
# \ / _    _  _|   _  _
#  | (_)\/(_)(_|\/| |(/_  v1.0.0
#       /       /
# 
# frozen_string_literal: true

require 'spec_helper.rb'

describe 'Verification' do
  it "can create" do
    @holodeck.mock(Twilio::Response.new(500, ''))

    expect {
      @client.verify.v1.services('VAXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX') \
                       .verifications.create(to: 'to', channel: 'channel')
    }.to raise_exception(Twilio::REST::TwilioError)

    values = {'To' => 'to', 'Channel' => 'channel', }
    expect(
    @holodeck.has_request?(Holodeck::Request.new(
        method: 'post',
        url: 'https://verify.twilio.com/v1/Services/VAXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX/Verifications',
        data: values,
    ))).to eq(true)
  end

  it "receives create_verification responses" do
    @holodeck.mock(Twilio::Response.new(
        201,
      %q[
      {
          "sid": "VEaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
          "service_sid": "VAaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
          "account_sid": "ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
          "to": "+14159373912",
          "channel": "sms",
          "status": "pending",
          "valid": null,
          "date_created": "2015-07-30T20:00:00Z",
          "date_updated": "2015-07-30T20:00:00Z",
          "lookup": {
              "carrier": {
                  "error_code": null,
                  "name": "Carrier Name",
                  "mobile_country_code": "310",
                  "mobile_network_code": "150",
                  "type": "mobile"
              }
          }
      }
      ]
    ))

    actual = @client.verify.v1.services('VAXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX') \
                              .verifications.create(to: 'to', channel: 'channel')

    expect(actual).to_not eq(nil)
  end
end